name: üöÄ Build and Release Multi-Platform

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      prerelease:
        description: 'Mark as prerelease'
        type: boolean
        default: false
      console_build:
        description: 'Build console version (for debugging)'
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.10'
  APP_NAME: 'BiliHardcore_AI'

jobs:
  build:
    name: üî® Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
            ext: .exe
            artifact_name: windows-x64
            package_ext: zip
          - os: macos-latest
            platform: macos
            arch: arm64
            ext: .app
            artifact_name: macos-arm64
            package_ext: zip
          - os: macos-13
            platform: macos
            arch: x64
            ext: .app
            artifact_name: macos-x64
            package_ext: zip
          - os: ubuntu-latest
            platform: linux
            arch: x64
            ext: ''
            artifact_name: linux-x64
            package_ext: tar.gz

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ëé∑ÂèñÂÆåÊï¥ÂéÜÂè≤ÔºåÁî®‰∫éÁâàÊú¨Ê†áÁ≠æ

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üñºÔ∏è Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb-cursor0 \
            libxcb-xinerama0 \
            libxcb-randr0 \
            libxcb-xtest0 \
            libxcb-xfixes0 \
            libxcb-shape0 \
            libglib2.0-0 \
            libgl1-mesa-glx \
            libfontconfig1 \
            libxrender1 \
            libdbus-1-3 \
            libxkbcommon-x11-0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-render-util0

      - name: üìù Generate PyInstaller spec
        run: python build_spec.py

      - name: üõ†Ô∏è Build with PyInstaller (Windows)
        if: matrix.platform == 'windows'
        run: |
          $console_flag = if ("${{ github.event.inputs.console_build }}" -eq "true") { "--console" } else { "--windowed" }
          
          pyinstaller --clean --noconfirm `
            --name "${{ env.APP_NAME }}" `
            $console_flag `
            --onedir `
            --add-data "config;config" `
            --add-data "assets;assets" `
            --distpath "dist" `
            --workpath "build" `
            --specpath "." `
            --exclude-module tkinter `
            --exclude-module matplotlib `
            --exclude-module numpy `
            --exclude-module scipy `
            --hidden-import "PySide6.QtCore" `
            --hidden-import "PySide6.QtGui" `
            --hidden-import "PySide6.QtWidgets" `
            run.py
        shell: pwsh

      - name: üõ†Ô∏è Build with PyInstaller (macOS)
        if: matrix.platform == 'macos'
        run: |
          console_flag="--windowed"
          if [ "${{ github.event.inputs.console_build }}" = "true" ]; then
            console_flag="--console"
          fi
          
          pyinstaller --clean --noconfirm \
            --name "${{ env.APP_NAME }}" \
            $console_flag \
            --onedir \
            --add-data "config:config" \
            --add-data "assets:assets" \
            --distpath "dist" \
            --workpath "build" \
            --specpath "." \
            --target-arch "${{ matrix.arch }}" \
            --exclude-module tkinter \
            --exclude-module matplotlib \
            --exclude-module numpy \
            --exclude-module scipy \
            --hidden-import "PySide6.QtCore" \
            --hidden-import "PySide6.QtGui" \
            --hidden-import "PySide6.QtWidgets" \
            run.py

      - name: üõ†Ô∏è Build with PyInstaller (Linux)
        if: matrix.platform == 'linux'
        run: |
          console_flag="--windowed"
          if [ "${{ github.event.inputs.console_build }}" = "true" ]; then
            console_flag="--console"
          fi

          pyinstaller --clean --noconfirm \
            --name "${{ env.APP_NAME }}" \
            $console_flag \
            --onedir \
            --add-data "config:config" \
            --add-data "assets:assets" \
            --distpath "dist" \
            --workpath "build" \
            --specpath "." \
            --exclude-module tkinter \
            --exclude-module matplotlib \
            --exclude-module numpy \
            --exclude-module scipy \
            --hidden-import "PySide6.QtCore" \
            --hidden-import "PySide6.QtGui" \
            --hidden-import "PySide6.QtWidgets" \
            run.py

      - name: üìù Create build info
        run: |
          mkdir -p "dist/${{ env.APP_NAME }}"
          cat > "dist/${{ env.APP_NAME }}/BUILD_INFO.txt" << EOF
          Application: ${{ env.APP_NAME }}
          Version: ${{ github.ref_name || github.event.inputs.version }}
          Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Platform: ${{ matrix.platform }}-${{ matrix.arch }}
          Python Version: ${{ env.PYTHON_VERSION }}
          Git Commit: ${{ github.sha }}
          Git Branch: ${{ github.ref_name }}
          Workflow: ${{ github.workflow }}
          Console Build: ${{ github.event.inputs.console_build || 'false' }}
          EOF
        shell: bash

      - name: üß™ Test executable (Windows)
        if: matrix.platform == 'windows'
        run: |
          $exe_path = "dist/${{ env.APP_NAME }}/${{ env.APP_NAME }}.exe"
          if (Test-Path $exe_path) {
            Write-Host "‚úÖ Executable created successfully: $exe_path"
            $size = (Get-Item $exe_path).Length / 1MB
            Write-Host "üìè Executable size: $([math]::Round($size, 2)) MB"
            
            Write-Host "`nüìÅ Distribution contents:"
            Get-ChildItem "dist/${{ env.APP_NAME }}" | ForEach-Object {
              if ($_.PSIsContainer) {
                Write-Host "  üìÅ $($_.Name)/"
              } else {
                $fileSize = $_.Length / 1KB
                Write-Host "  üìÑ $($_.Name) ($([math]::Round($fileSize, 1)) KB)"
              }
            }
          } else {
            Write-Error "‚ùå Executable not found: $exe_path"
            exit 1
          }
        shell: pwsh

      - name: üß™ Test executable (Unix)
        if: matrix.platform != 'windows'
        run: |
          if [ "${{ matrix.platform }}" = "macos" ]; then
            app_path="dist/${{ env.APP_NAME }}.app"
            exe_path="$app_path/Contents/MacOS/${{ env.APP_NAME }}"
          else
            exe_path="dist/${{ env.APP_NAME }}/${{ env.APP_NAME }}"
          fi
          
          if [ -f "$exe_path" ] || [ -d "$app_path" ]; then
            echo "‚úÖ Executable created successfully: $exe_path"
            if [ -f "$exe_path" ]; then
              size=$(du -m "$exe_path" | cut -f1)
              echo "üìè Executable size: ${size} MB"
            fi
            
            echo ""
            echo "üìÅ Distribution contents:"
            if [ "${{ matrix.platform }}" = "macos" ] && [ -d "$app_path" ]; then
              find "dist" -maxdepth 3 -type f | head -20 | while read file; do
                size=$(du -k "$file" | cut -f1)
                echo "  üìÑ $(basename "$file") (${size} KB)"
              done
            else
              find "dist/${{ env.APP_NAME }}" -maxdepth 1 | while read item; do
                if [ -d "$item" ] && [ "$item" != "dist/${{ env.APP_NAME }}" ]; then
                  echo "  üìÅ $(basename "$item")/"
                elif [ -f "$item" ]; then
                  size=$(du -k "$item" | cut -f1)
                  echo "  üìÑ $(basename "$item") (${size} KB)"
                fi
              done
            fi
          else
            echo "‚ùå Executable not found: $exe_path"
            exit 1
          fi

      - name: üì¶ Create distribution package
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            version="${{ github.event.inputs.version }}"
          else
            version="${{ github.ref_name }}"
          fi
          
          echo "Creating package for version: $version"
          
          if [ "${{ matrix.platform }}" = "windows" ]; then
            package_name="${{ env.APP_NAME }}-${version}-${{ matrix.artifact_name }}.zip"
            cd dist
            powershell -Command "Compress-Archive -Path '${{ env.APP_NAME }}/*' -DestinationPath '../${package_name}' -CompressionLevel Optimal"
          elif [ "${{ matrix.platform }}" = "macos" ]; then
            package_name="${{ env.APP_NAME }}-${version}-${{ matrix.artifact_name }}.zip"
            cd dist
            zip -r -9 "../${package_name}" "${{ env.APP_NAME }}/" || zip -r -9 "../${package_name}" "${{ env.APP_NAME }}.app/"
          else
            package_name="${{ env.APP_NAME }}-${version}-${{ matrix.artifact_name }}.tar.gz"
            cd dist
            tar -czf "../${package_name}" "${{ env.APP_NAME }}/"
          fi
          
          cd ..
          if [ -f "${package_name}" ]; then
            size=$(du -m "${package_name}" | cut -f1)
            echo "‚úÖ Package created: ${package_name} (${size} MB)"
            echo "PACKAGE_NAME=${package_name}" >> $GITHUB_ENV
          else
            echo "‚ùå Failed to create package: ${package_name}"
            exit 1
          fi
        shell: bash

      - name: üì§ Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.artifact_name }}
          path: ${{ env.PACKAGE_NAME }}
          retention-days: 30
          compression-level: 0  # Â∑≤ÁªèÂéãÁº©Ëøá‰∫Ü

  release:
    name: üöÄ Create Release
    needs: build
    runs-on: ubuntu-latest
    if: always() && (needs.build.result == 'success')
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì• Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: üìã List artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f -name "*.zip" -o -name "*.tar.gz" | sort

      - name: üìù Generate release notes
        id: release_notes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            version="${{ github.event.inputs.version }}"
          else
            version="${{ github.ref_name }}"
          fi
          
          # Ëé∑ÂèñÊúÄÊñ∞ÁöÑcommit‰ø°ÊÅØ
          commit_count=$(git rev-list --count HEAD)
          commit_hash=$(git rev-parse --short HEAD)
          
          # Â∞ùËØïËé∑Âèñchangelog
          changelog=""
          if [ -f "CHANGELOG.md" ]; then
            # ÊèêÂèñÁõ∏ÂÖ≥ÁâàÊú¨ÁöÑchangelog
            changelog=$(awk "/^## \[$version\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md || echo "")
          fi
          
          if [ -z "$changelog" ]; then
            changelog="- ÊîØÊåÅÂ§öÂπ≥Âè∞ËøêË°å (Windows/macOS/Linux)
          - ‰ºòÂåñ‰∫ÜÁî®Êà∑ÁïåÈù¢‰ΩìÈ™å  
          - ‰øÆÂ§ç‰∫ÜÂ∑≤Áü•ÈóÆÈ¢ò
          - ÊèêÂçá‰∫ÜÁ®≥ÂÆöÊÄßÂíåÊÄßËÉΩ"
          fi
          
          cat > release_notes.md << EOF
          # üéØ BÁ´ôÁ°¨Ê†∏‰ºöÂëòËá™Âä®Á≠îÈ¢òÂ∑•ÂÖ∑ ${version}
          
          ![Downloads](https://img.shields.io/github/downloads/${{ github.repository }}/${version}/total)
          ![Release Date](https://img.shields.io/github/release-date/${{ github.repository }})
          ![Platform](https://img.shields.io/badge/platform-Windows%20%7C%20macOS%20%7C%20Linux-lightgrey)
          
          ## üì¶ ‰∏ãËΩΩËØ¥Êòé
          
          ËØ∑Ê†πÊçÆ‰Ω†ÁöÑÊìç‰ΩúÁ≥ªÁªüÈÄâÊã©ÂØπÂ∫îÁöÑÁâàÊú¨Ôºö
          
          | Êìç‰ΩúÁ≥ªÁªü | Êû∂ÊûÑ | ‰∏ãËΩΩÈìæÊé• | ËØ¥Êòé |
          |---------|------|----------|------|
          | ü™ü **Windows** | x64 | [\`${{ env.APP_NAME }}-${version}-windows-x64.zip\`](https://github.com/${{ github.repository }}/releases/download/${version}/${{ env.APP_NAME }}-${version}-windows-x64.zip) | Windows 10/11 |
          | üçé **macOS** | Apple Silicon (M1/M2) | [\`${{ env.APP_NAME }}-${version}-macos-arm64.zip\`](https://github.com/${{ github.repository }}/releases/download/${version}/${{ env.APP_NAME }}-${version}-macos-arm64.zip) | macOS 11.0+ |
          | üçé **macOS** | Intel | [\`${{ env.APP_NAME }}-${version}-macos-x64.zip\`](https://github.com/${{ github.repository }}/releases/download/${version}/${{ env.APP_NAME }}-${version}-macos-x64.zip) | macOS 10.15+ |
          | üêß **Linux** | x64 | [\`${{ env.APP_NAME }}-${version}-linux-x64.tar.gz\`](https://github.com/${{ github.repository }}/releases/download/${version}/${{ env.APP_NAME }}-${version}-linux-x64.tar.gz) | Ubuntu 20.04+ ÊàñÂÖ∂‰ªñÂèëË°åÁâà |
          
          ## üöÄ Âø´ÈÄüÂºÄÂßã
          
          ### Windows Áî®Êà∑
          1. ‰∏ãËΩΩ \`${{ env.APP_NAME }}-${version}-windows-x64.zip\`
          2. Ëß£ÂéãÂà∞‰ªªÊÑèÁõÆÂΩï
          3. ÂèåÂáª \`${{ env.APP_NAME }}.exe\` ËøêË°å
          
          ### macOS Áî®Êà∑  
          1. ‰∏ãËΩΩÂØπÂ∫îÊû∂ÊûÑÁöÑ zip Êñá‰ª∂
          2. Ëß£ÂéãÂêéÊãñÊãΩÂà∞Â∫îÁî®Á®ãÂ∫èÊñá‰ª∂Â§π
          3. È¶ñÊ¨°ËøêË°åÂèØËÉΩÈúÄË¶ÅÂú®Á≥ªÁªüÂÅèÂ•ΩËÆæÁΩÆ‰∏≠ÂÖÅËÆ∏ËøêË°å
          
          ### Linux Áî®Êà∑
          1. ‰∏ãËΩΩ \`${{ env.APP_NAME }}-${version}-linux-x64.tar.gz\`
          2. Ëß£ÂéãÔºö\`tar -xzf ${{ env.APP_NAME }}-${version}-linux-x64.tar.gz\`
          3. ËøêË°åÔºö\`cd ${{ env.APP_NAME }} && ./${{ env.APP_NAME }}\`
          
          ## üìã Êõ¥Êñ∞Êó•Âøó
          
          ${changelog}
          
          ## ‚ö†Ô∏è Ê≥®ÊÑè‰∫ãÈ°π
          
          - **È¶ñÊ¨°ËøêË°å**ÔºöËØ∑Á°Æ‰øùÁΩëÁªúËøûÊé•Ê≠£Â∏∏
          - **LinuxÁî®Êà∑**ÔºöÂèØËÉΩÈúÄË¶ÅÂÆâË£ÖÈ¢ùÂ§ñÁöÑÁ≥ªÁªü‰æùËµñÔºàËßÅ‰∏ãÊñπÔºâ
          - **‰ΩøÁî®ËØ¥Êòé**ÔºöËØ¶ËßÅ [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)
          - **ÈóÆÈ¢òÂèçÈ¶à**ÔºöËØ∑Âú® [Issues](https://github.com/${{ github.repository }}/issues) ‰∏≠Êä•Âëä
          
          ## üîß Á≥ªÁªüË¶ÅÊ±Ç
          
          | Á≥ªÁªü | ÊúÄ‰ΩéÁâàÊú¨ | Êé®ËçêÈÖçÁΩÆ |
          |------|----------|----------|
          | Windows | Windows 10 (1909) | Windows 11 |
          | macOS | macOS 10.15 (Catalina) | macOS 12.0+ |
          | Linux | Ubuntu 20.04 LTS | Ubuntu 22.04+ |
          
          ### Linux ‰æùËµñÂÆâË£Ö
          
          **Ubuntu/Debian:**
          \`\`\`bash
          sudo apt update && sudo apt install -y libxcb-cursor0 libxcb-xinerama0 libgl1-mesa-glx
          \`\`\`
          
          **CentOS/RHEL/Fedora:**
          \`\`\`bash
          sudo dnf install -y libxcb xcb-util-cursor mesa-libGL
          \`\`\`
          
          ## üõ†Ô∏è ÊûÑÂª∫‰ø°ÊÅØ
          
          - **ÊûÑÂª∫Êó∂Èó¥**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **GitÊèê‰∫§**: ${commit_hash} (${commit_count} commits)
          - **PythonÁâàÊú¨**: ${{ env.PYTHON_VERSION }}
          - **PyInstallerÁâàÊú¨**: $(pip show pyinstaller | grep Version | cut -d' ' -f2 || echo "Unknown")
          - **ÊéßÂà∂Âè∞ÊûÑÂª∫**: ${{ github.event.inputs.console_build || 'false' }}
          
          ## üíù ÊîØÊåÅÈ°πÁõÆ
          
          Â¶ÇÊûúËøô‰∏™È°πÁõÆÂØπ‰Ω†ÊúâÂ∏ÆÂä©ÔºåËØ∑ËÄÉËôëÔºö
          - ‚≠ê ÁªôÈ°πÁõÆÂä†Êòü
          - üêõ Êä•ÂëäÈóÆÈ¢òÂíåÂª∫ËÆÆ
          - üîÑ ÂàÜ‰∫´ÁªôÊúãÂèã
          - üìù Ë¥°ÁåÆ‰ª£Á†Å
          
          ---
          
          **ÂÆåÊï¥Ê∫ê‰ª£Á†Å**: [GitHub](https://github.com/${{ github.repository }})  
          **‰ΩøÁî®ÊñáÊ°£**: [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)  
          **ÈóÆÈ¢òÂèçÈ¶à**: [Issues](https://github.com/${{ github.repository }}/issues)
          EOF
          
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${{ github.event.inputs.prerelease || 'false' }}" >> $GITHUB_OUTPUT

      - name: üè∑Ô∏è Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_notes.outputs.version }}
          name: ${{ env.APP_NAME }} ${{ steps.release_notes.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ steps.release_notes.outputs.is_prerelease }}
          files: |
            artifacts/**/*.zip
            artifacts/**/*.tar.gz
          make_latest: ${{ steps.release_notes.outputs.is_prerelease != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üéâ Success notification
        run: |
          echo "üéâ Release created successfully!"
          echo "üì¶ Packages built for all platforms:"
          find artifacts -name "*.zip" -o -name "*.tar.gz" | sort | while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "  üìÑ $(basename "$file") ($size)"
          done
          echo ""
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.release_notes.outputs.version }}"
          echo "üìä View release: https://github.com/${{ github.repository }}/releases/latest" 